# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ud9wXzAIIqkFI8CjeyXpbZu8yaTZL_kE
"""

pip install yfinance

import yfinance as yf
import pandas as pd
import numpy as np
import math

from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score
#setup
#code
ticker = yf.Ticker('NVDA') #import data
aapl_df = ticker.history(period="5y") #get data from 5 year period in dataframe
aapl_df.drop(['High','Close','Volume','Dividends','Stock Splits'], axis=1, inplace=True)
open = np.empty(shape = (1259), dtype = float)
close = np.empty(shape = (1259), dtype = float)

open=aapl_df[['Open']].to_numpy()

X=np.zeros((1260,3))
Y=[0]*1260

for i in range(1250):
  X[i] = [open[i][0], open[i+1][0], open[i+2][0]]
  Y[i] = open[i+3][0]
print(X[0], Y[0])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33)

linear = linear_model.LinearRegression()
linear.fit(X_train, y_train)
y_predlinear = linear.predict(X_test)


print("Coefficients: \n", linear.coef_)
# The mean squared error

ypredtrain=linear.predict(X_train)
ypredtest=linear.predict(X_test)
print("Mean squared error: %.2f" % mean_squared_error(y_train, ypredtrain))
print("Mean squared error: %.2f" % mean_squared_error(y_test, y_predlinear))

from sklearn.tree import DecisionTreeRegressor
decisionTree = DecisionTreeRegressor(max_depth=50)
decisionTree.fit(X_train, y_train)
tree_train_pred = decisionTree.predict(X_train)
Y_predtree = decisionTree.predict(X_test)
print("Mean squared error: %.2f" % mean_squared_error(y_train, tree_train_pred))
print("Mean squared error: %.2f" % mean_squared_error(y_test, Y_predtree))

from sklearn.ensemble import RandomForestRegressor
from sklearn.datasets import make_regression
randomForest = RandomForestRegressor(max_depth=50, random_state=0)
randomForest.fit(X_train, y_train)
forestTrainPred=randomForest.predict(X_train)
Y_predforest = randomForest.predict(X_test)
print("Mean squared error: %.2f" % mean_squared_error(y_train, forestTrainPred))
print("Mean squared error: %.2f" % mean_squared_error(y_test, Y_predforest))

from sklearn.neural_network import MLPRegressor
neural = MLPRegressor(random_state=1, max_iter=500).fit(X_train, y_train)
neural.fit(X_train, y_train)
neuralTestPred=neural.predict(X_test)
neuralTrainPred=neural.predict(X_train)
print("Mean squared error: %.2f" % mean_squared_error(y_train, neuralTrainPred))
print("Mean squared error: %.2f" % mean_squared_error(y_test, neuralTestPred))

w1=0.25
w2=0.25
w3=0.25
w4=0.25
sum=w1+w2+w3+w4

ypredtest=linear.predict(X_test)
Y_predtree = decisionTree.predict(X_test)
Y_predforest = randomForest.predict(X_test)
neuralTestPred=neural.predict(X_test)

for i in range(len(X_test)):
  weighted=w1*y_predlinear+w2*Y_predtree+w3*Y_predforest+w4*neuralTestPred
  error_linear=abs(y_test[i]-ypredtest[i])
  error_tree=abs(y_test[i]-Y_predtree[i])
  error_forest=abs(y_test[i]-Y_predforest[i])
  error_neural=abs(y_test[i]-neuralTestPred[i])
  w1=(w1/(2**error_linear))/sum
  w2=(w2/(2**error_tree))/sum
  w3=(w3/(2**error_forest))/sum
  w4=(w4/(2**error_neural))/sum
  print(w1,w2,w3,w4)

amount=10000
stocks=0
prediction=linear.predict(X)
for i in range(1240):
  n=math.floor(5000/Y[i])
  if prediction[i+1] > Y[i] and amount>n*Y[i]:
    stocks+=n
    amount-=n*Y[i]
  elif prediction[i+1] < Y[i] and stocks>1:
    amount+=n*Y[i]
    stocks-=n
  if i == 1239:
    amount = stocks*Y[i]
    stocks = 0
print("Final 2: "+str(amount))
print("Profit percent 2: " + str((amount-10000)/100))

amount=10000
stocks=0
prediction=linear.predict(X)
for i in range(1240):
  n=math.floor(2000/Y[i])
  if prediction[i+1] > Y[i] and amount>n*Y[i]:
    stocks+=n
    amount-=n*Y[i]
  elif prediction[i+1] < Y[i] and stocks>1:
    amount+=n*Y[i]
    stocks-=n
  if i == 1239:
    amount = stocks*Y[i]
    stocks = 0
print("Final 1: "+str(amount))
print("Profit percent 1: " + str((amount-10000)/100))